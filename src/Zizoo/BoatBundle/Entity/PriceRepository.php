<?php

namespace Zizoo\BoatBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;

/**
 * PriceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PriceRepository extends EntityRepository
{
    
    

    public function getPrices(Boat $boat, $from, $to)
    {
        $qb = $this->createQueryBuilder('price')
                    ->select('price')
                    ->where('(:from <= price.available AND :until >= price.available)')
                    ->andWhere('price.boat = :boat')
                    ->setParameter('from', $from)
                    ->setParameter('until', $to)
                    ->setParameter('boat', $boat)
                    ->orderBy('price.available', 'ASC');
        
        $result = $qb->getQuery()->getResult();
        $prices = new \Doctrine\Common\Collections\ArrayCollection($result);
        
        return $prices;
    }
    
    public function getTotalSetPrice(Boat $boat, $from, $to)
    {
        $qb = $this->createQueryBuilder('price')
                    ->select('COUNT(price.id) as num_days, SUM(price.price) as set_price')
                    ->where('(:from <= price.available AND :until > price.available)')
                    ->andWhere('price.boat = :boat')
                    ->setParameter('from', $from)
                    ->setParameter('until', $to)
                    ->setParameter('boat', $boat);
        
        return $qb->getQuery()->getSingleResult();
    }
        
    
    public function getMinimumPriceOfBoat(Boat $boat)
    {
        $qb = $this->createQueryBuilder('price')
                    ->select('MIN(price.price)')
                    ->where('price.boat = :boat')
                    ->setParameter('boat', $boat);
        
        $result = (float)$qb->getQuery()->getSingleScalarResult();
        $defaultPrice = $boat->getDefaultPrice();
        if ($result){
            if ($result>$defaultPrice && $defaultPrice>0){
                return $defaultPrice;
            } else {
                return $result;
            }
        } else {
            if ($defaultPrice>0){
                return $defaultPrice;
            } else {
                return null;
            }
        }
    }
    
    public function getMinimumAndMaximumPrice()
    {
       $qb = $this->createQueryBuilder('price')
                    ->select('MIN(price.price) as min_price, MAX(price.price) as max_price'); 
       
       $result = $qb->getQuery()->getSingleResult();
       return $result;
    }
}
