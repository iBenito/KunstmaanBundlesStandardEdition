<?php

namespace Zizoo\BoatBundle\Entity;

use Zizoo\BoatBundle\Extensions\DoctrineExtensions\CustomWalker\SortableNullsWalker;
use Zizoo\AddressBundle\Form\Model\SearchBoat;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query;

/**
 * BoatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BoatRepository extends EntityRepository
{
    public function getBoats($limit = null)
    {
        $qb = $this->createQueryBuilder('b')
                   ->select('b')
                   ->addOrderBy('b.created', 'DESC');

        if (false === is_null($limit))
            $qb->setMaxResults($limit);

        return $qb->getQuery()
                  ->getResult();
    }
    
    /**
     * 
     * @param string $search      Optional location search value
     * @param string $resFrom     Optional date from
     * @param string $resTo       Optional date until
     * @param string $numGuests   Optional number of guests
     * @return Doctrine\ORM\AbstractQuery[] Results
     * @author Alex Fuckert <alexf83@gmail.com>
     */
    public function searchBoatAvailability(SearchBoat $searchBoat)
    {
        // Join boat, image, address, country and reservation
        $qb = $this->createQueryBuilder('boat')
                   ->select('boat, image, address, availability, country, reservation, boat_type')
                   ->leftJoin('boat.image', 'image')
                   ->leftJoin('boat.address', 'address')
                   ->leftJoin('boat.reservation', 'reservation')
                   ->leftJoin('boat.availability', 'availability')
                   ->leftJoin('boat.address', 'boat_address')
                   ->leftJoin('availability.address', 'availability_address')
                   ->leftJoin('availability_address.country', 'availability_country')
                   ->leftJoin('address.country', 'country')
                   ->leftJoin('boat.boatType', 'boat_type');
        
        // Optionally search by boat location or boat availability location
        $firstWhere = true;
        if ($searchBoat->getLocation()){
            $qb->where('address.locality = :search')
               ->orWhere('address.subLocality = :search')
               ->orWhere('address.state = :search')
               ->orWhere('address.province = :search')
               ->orWhere('country.printableName = :search')
               ->orWhere('availability_address.locality = :search')
               ->orWhere('availability_address.subLocality = :search')
               ->orWhere('availability_address.state = :search')
               ->orWhere('availability_address.province = :search')
               ->orWhere('availability_country.printableName = :search')
               ->setParameter('search', $searchBoat->getLocation());
            $firstWhere = false;
        }
        
        // Optionally restrict by boat type
        
        // Optionally restrict by number of guests
        if ($searchBoat->getNumGuests()){
            if ($firstWhere){
                $qb->where('boat.nr_guests >= :num_guests');
            } else {
                $qb->andWhere('boat.nr_guests >= :num_guests');
            }
            $qb->setParameter('num_guests', $searchBoat->getNumGuests());
            $firstWhere = false;
        }
        
        // Optionally restrict by boat length
        if ($searchBoat->getLengthFrom()){
            if ($firstWhere){
                $qb->where('boat.length >= :length_from');
            } else {
                $qb->andWhere('boat.length >= :length_from');
            }
            $qb->setParameter('length_from', $searchBoat->getLengthFrom());
            $firstWhere = false;
        }
        if ($searchBoat->getLengthTo()){
            if ($firstWhere){
                $qb->where('boat.length <= :length_to');
            } else {
                $qb->andWhere('boat.length <= :length_to');
            }
            $qb->setParameter('length_to', $searchBoat->getLengthTo());
            $firstWhere = false;
        }
        
        // Optionally restrict by number of cabins
        if ($searchBoat->getNumCabinsFrom()){
            if ($firstWhere){
                $qb->where('boat.cabins >= :num_cabins_from');
            } else {
                $qb->andWhere('boat.cabins >= :num_cabins_from');
            }
            $qb->setParameter('num_cabins_from', $searchBoat->getNumCabinsFrom());
            $firstWhere = false;
        }
        if ($searchBoat->getNumCabinsTo()){
            if ($firstWhere){
                $qb->where('boat.cabins <= :num_cabins_to');
            } else {
                $qb->andWhere('boat.cabins <= :num_cabins_to');
            }
            $qb->setParameter('num_cabins_to', $searchBoat->getNumCabinsTo());
            $firstWhere = false;
        }
        
        // Optionally restrict by boat type
        if ($searchBoat->boatTypeSelected()){           
            $boatTypes = $searchBoat->getBoatType();
            $boatTypes = $boatTypes['boat_type'];
            $boatTypeIds = array();
            foreach ($boatTypes as $boatType){
                $boatTypeIds[] = $boatType->getId();
            }
            if ($firstWhere){
                $qb->where('boat.boatType IN (:boat_types)');
            } else {
                $qb->andWhere('boat.boatType IN (:boat_types)');
            }
            $qb->setParameter('boat_types', $boatTypeIds);
            $firstWhere = false;
            
        }
        
        //$qb->getQuery();
        
         
        $qb->addOrderBy('availability.id', 'desc');

        
        return $qb->getQuery()
                  ->setHint(Query::HINT_CUSTOM_OUTPUT_WALKER, 'Zizoo\BoatBundle\Extensions\DoctrineExtensions\CustomWalker\SortableNullsWalker')
                  ->setHint('SortableNullsWalker.fields',
                        array(
                            'availability.id' => SortableNullsWalker::NULLS_LAST,
                        ))
                  ->getResult();
    }
    
    
    public function getMaxBoatValues(){
        $qb = $this->createQueryBuilder('boat')
                   ->select('MAX(boat.cabins) as max_cabins, MAX(boat.length) as max_length');
        
        return $qb->getQuery()->getSingleResult();
    }
    
    
}
