<?php

namespace Zizoo\BoatBundle\Entity;

use Zizoo\BoatBundle\Extensions\DoctrineExtensions\CustomWalker\SortableNullsWalker;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\ORM\Query;

/**
 * BoatRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BoatRepository extends EntityRepository
{
    public function getBoats($limit = null)
    {
        $qb = $this->createQueryBuilder('b')
                   ->select('b')
                   ->addOrderBy('b.created', 'DESC');

        if (false === is_null($limit))
            $qb->setMaxResults($limit);

        return $qb->getQuery()
                  ->getResult();
    }
    
    /**
     * 
     * @param string $search      Optional location search value
     * @param string $resFrom     Optional date from
     * @param string $resTo       Optional date until
     * @param string $numGuests   Optional number of guests
     * @return Doctrine\ORM\AbstractQuery[] Results
     * @author Alex Fuckert <alexf83@gmail.com>
     */
    public function searchBoatAvailability($search='-1', $numGuests='', 
                                            $numCabinsFrom='', $numCabinsTo='',
                                            $lengthFrom='', $lengthTo='')
    {
        // Join boat, image, address, country and reservation
        $qb = $this->createQueryBuilder('b')
                   ->select('b, i, a, av, c, r')
                   ->leftJoin('b.image', 'i')
                   ->leftJoin('b.address', 'a')
                   ->leftJoin('b.reservation', 'r')
                   ->leftJoin('b.availability', 'av')
                   ->leftJoin('b.address', 'b_a')
                   ->leftJoin('av.address', 'av_a')
                   ->leftJoin('av_a.country', 'av_c')
                   ->leftJoin('a.country', 'c');
        
        // Optionally search by boat location or boat availability location
        $firstWhere = true;
        if ($search!='-1'){
            $qb->where('a.locality = :search')
               ->orWhere('a.subLocality = :search')
               ->orWhere('a.state = :search')
               ->orWhere('a.province = :search')
               ->orWhere('c.printableName = :search')
               ->orWhere('av_a.locality = :search')
               ->orWhere('av_a.subLocality = :search')
               ->orWhere('av_a.state = :search')
               ->orWhere('av_a.province = :search')
               ->orWhere('av_c.printableName = :search')
               ->setParameter('search', $search);
            $firstWhere = false;
        }

        // Optionally restrict by number of guests
        if ($numGuests!=''){
            if ($firstWhere){
                $qb->where('b.nr_guests >= :num_guests');
            } else {
                $qb->andWhere('b.nr_guests >= :num_guests');
            }
            $qb->setParameter('num_guests', $numGuests);
            $firstWhere = false;
        }
        
        // Optionally restrict by boat length
        if ($lengthFrom!=''){
            if ($firstWhere){
                $qb->where('b.length >= :length_from');
            } else {
                $qb->andWhere('b.length >= :length_from');
            }
            $qb->setParameter('length_from', $lengthFrom);
            $firstWhere = false;
        }
        if ($lengthTo!=''){
            if ($firstWhere){
                $qb->where('b.length <= :length_to');
            } else {
                $qb->andWhere('b.length <= :length_to');
            }
            $qb->setParameter('length_to', $lengthTo);
            $firstWhere = false;
        }
        
        // Optionally restrict by number of cabins
        if ($numCabinsFrom!=''){
            if ($firstWhere){
                $qb->where('b.cabins >= :num_cabins_from');
            } else {
                $qb->andWhere('b.cabins >= :num_cabins_from');
            }
            $qb->setParameter('num_cabins_from', $numCabinsFrom);
            $firstWhere = false;
        }
        if ($numCabinsTo!=''){
            if ($firstWhere){
                $qb->where('b.cabins <= :num_cabins_to');
            } else {
                $qb->andWhere('b.cabins <= :num_cabins_to');
            }
            $qb->setParameter('num_cabins_to', $numCabinsTo);
            $firstWhere = false;
        }
        
        //$qb->getQuery();
        
         
        $qb->addOrderBy('av.id', 'desc');

        
        return $qb->getQuery()
                  ->setHint(Query::HINT_CUSTOM_OUTPUT_WALKER, 'Zizoo\BoatBundle\Extensions\DoctrineExtensions\CustomWalker\SortableNullsWalker')
                  ->setHint('SortableNullsWalker.fields',
                        array(
                            'av.id' => SortableNullsWalker::NULLS_LAST,
                        ))
                  ->getResult();
    }
    
    
    public function getMaxBoatValues(){
        $qb = $this->createQueryBuilder('b')
                   ->select('MAX(b.cabins) as max_cabins, MAX(b.length) as max_length');
        
        return $qb->getQuery()->getSingleResult();
    }
    
    
}
