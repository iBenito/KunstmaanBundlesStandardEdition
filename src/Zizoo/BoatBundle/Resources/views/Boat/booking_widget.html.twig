<div id="booking_widget">
    <div id="booking_widget_inner">
        <form id="availability_form" action="{{ url }}" method="get" class="form">

            <!-- start:price -->
            <div class="price">
                <table id="booking_price_container">
                    <tbody>
                        <tr>
                            <td>Price</td>
                            <td>{{ book_boat|BookBoat_price(subtotal)|raw}}</td>
                        </tr>
                        {% if boat.crewOptional == true %}
                        <tr>
                            <td><div id="crew_outer_container"><span id="crew_container" class="row">{{ form_widget(form.crew) }}</span> Crew {{ form_errors(form.crew) }}</div></td>
                            <td>{{ book_boat|BookBoat_price(crew_price)|raw}}</td>
                        </tr>
                        {% endif %}
                    </tbody>
                    <tfoot>
                        <tr>
                            <td>Total</td>
                            <td>{{ book_boat|BookBoat_price(total)|raw}}</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
            <!-- end:price -->

            <input type="hidden" name="url" value="{{ url }}" />
            <input type="hidden" name="ajax_url" value="{{ ajax_url }}" />

            <!-- start:summary -->
            <div class="summary">
                <ul class="clearfix">
                    <li>
                        <span class="icon calendar black"></span>
                        <span class="field">{{ form_widget(form.reservation_range.reservation_from) }}</span>
                    </li>
                    <li>
                        <span class="icon calendar black"></span>
                        <span class="field">{{ form_widget(form.reservation_range.reservation_to) }}</span>
                    </li>
                    {% if form.reservation_range.vars.errors|length > 0 %}
                    <li>
                        {{ form_errors(form.reservation_range) }}
                    </li>
                    {% endif %}
                    <li>
                        <span class="icon hash black"></span>
                        <span class="field">{{ form_widget(form.num_guests) }}</span>
                        {% if form.num_guests.vars.errors|length > 0 %}
                            {{ form_errors(form.num_guests) }}
                        {% endif %}
                    </li>
                </ul>
                <noscript>
                   <button type="submit" class="button orange big" title="Calculate">Calculate</button>
                </noscript>
            </div>
            <!-- end:summary -->  
        </form>
        {% if valid == true  %}
            <form id="booking_form" action="{{ book_url }}" method="get">
                <input name="zizoo_boat_book[reservation_from]" type="hidden" value="{{ form.vars.value.reservationRange.reservationFrom is empty ? "" : form.vars.value.reservationRange.reservationFrom|date }}" autocomplete="off" />
                <input name="zizoo_boat_book[reservation_to]" type="hidden" value="{{ form.vars.value.reservationRange.reservationTo is empty ? "" : form.vars.value.reservationRange.reservationTo|date }}" autocomplete="off" />
                <input name="zizoo_boat_book[num_guests]" type="hidden" value="{{ form.vars.value.numGuests }}" />
                <button type="submit" id="book_btn" class="button orange big" title="Book it">Book It</button>
            </form>
        {% else %}
           <button type="button" id="book_btn" disabled="disabled" class="button orange big" title="Book it">Book It</button>
        {% endif %}

        <div id="coming_soon" style="display: none">
            <h1>Hold tight!</h1>
            <h2>Booking functionality is coming soon!</h2>
        </div>
       
    </div>
</div>

<style type="text/css">
    #crew_outer_container {
        position: relative;
        margin-bottom: 0;
    }
    #crew_container {
        position: absolute;
        left: -13px;
    }
</style>

<script type="text/javascript">

    var bookingWidgetReservedDates      = {{ boat|reservedDatesWithBookings(reservations)|raw }};
    var bookingWidgetPriceDates         = {{ boat|priceDates(prices)|raw }};
    var bookingWidgetDefaultAllowed     = {{ boat.defaultPrice is not null ? 'true' : 'false' }};
    var bookingWidgetDefaultPrice       = {{ boat.defaultPrice is not null ? boat.defaultPrice : 'null' }};
    
    function bookingWidgetDefaultDateClass(day){
        if (bookingWidgetDefaultAllowed){
            return 'day_available';
        } else {
            return 'day_unavailable';
        }
    }
    
    function bookingWidgetCombinedDateClasses(dayStates, numStates){
        var arr = [], p, i = 0;
        for (dayStateId in dayStates){
            var dayState = dayStates[dayStateId];
            var suffix = dayState['suffix'];
            if (dayState!=null && suffix!=null && numStates==1){
                if (suffix=='start'){
                    arr[i++] = (availabilityDefaultAllowed?'day_available':'day_unavailable') + '-' + dayState['reservation_state'];
                } else {
                    arr[i++] = dayState['reservation_state'] + '-' + (availabilityDefaultAllowed?'day_available':'day_unavailable');
                }
            } else {
                arr[i++] = dayState['reservation_state'];
            }
        }
        return arr.join('-');
    }
    
    function bookingWidgetDefaultDate(day){
        if (bookingWidgetDefaultAllowed){
            return {selectable: true, dateClass: 'day_available', title: '&euro; ' + bookingWidgetDefaultPrice, content: day};
        } else {
            return {selectable: false, dateClass: 'day_unavailable', title: 'Unavailable', content: day};
        }
    }
    
    function openComingSoonDialog(){
        $('#coming_soon').dialog({
            modal: true,
            closeOnEscape: false,
            resizable: false,
            width: 470,
            maxWidth: 470,
            fluid: true,
            title: 'Coming Soon'
        });
    }
    
    function setup(){
        $('#zizoo_boat_book_num_guests').change(function(){
            reloadWidget();
        });
        $('#zizoo_boat_book_crew').change(function(){
            reloadWidget();
        });
        
        $('#booking_form').submit(function(){
            //window.location.href = $('#booking_form').attr('action');
            openComingSoonDialog();
            return false;
        });

        $('#booking_price_container, #book_btn').show();

        var clearBtnFnc1 = function(input) {
            setTimeout(function() {
                var buttonPane = $( input )
                    .datepicker( "widget" )
                    .find( ".ui-datepicker-buttonpane" );
                var btn = $( '<button class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" type="button">Clear</button>');
                btn.unbind("click")  .bind("click", function () {  
                    $.datepicker._clearDate( input );
                });
                btn.appendTo(buttonPane);
            }, 1 );
        };

        var clearBtnFnc2 = function(yes, month, inst) {
            setTimeout(function() {
                var buttonPane = $( this )
                    .datepicker( "widget" )
                    .find( ".ui-datepicker-buttonpane" );
                var btn = $( '<button class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" type="button">Clear</button>');
                btn.unbind("click")  .bind("click", function () {  
                   $.datepicker._clearDate( inst.input ); 
                });
                btn.appendTo(buttonPane);
            }, 1 );
        };


        Date.prototype.getDateFormatted = function() {
            var d = this.getDate();
            return d < 10 ? '0' + (d) : (d); // 
        }
        Date.prototype.getMonthFormatted = function() {
            var month = this.getMonth();
            return month < 9 ? '0' + (month+1) : (month+1); // ('' + month) for string result
        }
        
        $.extend($.datepick, {
            zizoo_widget: function(date) {
                var id = $(this).attr('id');
                var reservedDates    = null;
                var priceDate       = null;

                if (dateExists(bookingWidgetReservedDates, date.getFullYear(), date.getMonthFormatted(), date.getDateFormatted())){
                    reservedDates = bookingWidgetReservedDates[date.getFullYear()][date.getMonthFormatted()][date.getDateFormatted()];
                }

                if (dateExists(bookingWidgetPriceDates, date.getFullYear(), date.getMonthFormatted(), date.getDateFormatted())){
                    priceDate = bookingWidgetPriceDates[date.getFullYear()][date.getMonthFormatted()][date.getDateFormatted()];
                }
                
                
                if (priceDate){
                    if (reservedDates){
                        var dateClasses = new Array();
                        var selectable = true;
                        var i, numStates=0, numRequested=0;
                        for (i=0; i<reservedDates.length; i++){
                            var reservedDate = reservedDates[i];
                            if (reservedDate[0]=={{ constant('Zizoo\\ReservationBundle\\Entity\\Reservation::STATUS_ACCEPTED') }} || reservedDate[0]=={{ constant('Zizoo\\ReservationBundle\\Entity\\Reservation::STATUS_SELF') }} || reservedDate[0]=={{ constant('Zizoo\\ReservationBundle\\Entity\\Reservation::STATUS_HOLD') }}){
                                dateClasses['day_booked'] = {'reservation_state': 'day_booked', 'suffix': reservedDate[3]};
                                numStates++;
                            } else {
                                var defDayClass = defaultDateClass(date.getDateFormatted());
                                dateClasses[defDayClass] = {'reservation_state': defDayClass, 'suffix': null};
                                numStates++;
                            }
                        }
                        if (numRequested>0) numStates++;
                        var dateClass = bookingWidgetCombinedDateClasses(dateClasses, numStates);
                        if (dateClass=='day_booked') selectable = false;
                        return {selectable: selectable, dateClass: dateClass, title: '', content: date.getDateFormatted()};
                    } else {
                        return {selectable: true, dateClass: 'day_available', title: '&euro; ' + priceDate[0], content: date.getDateFormatted()};
                    }
                } else {
                    if (reservedDates){
                        var dateClasses = new Array();
                        var selectable = true;
                        var i, numStates=0, numRequested=0;
                        for (i=0; i<reservedDates.length; i++){
                            var reservedDate = reservedDates[i];
                            if (reservedDate[0]=={{ constant('Zizoo\\ReservationBundle\\Entity\\Reservation::STATUS_ACCEPTED') }} || reservedDate[0]=={{ constant('Zizoo\\ReservationBundle\\Entity\\Reservation::STATUS_SELF') }} || reservedDate[0]=={{ constant('Zizoo\\ReservationBundle\\Entity\\Reservation::STATUS_HOLD') }}){
                                dateClasses['day_booked'] = {'reservation_state': 'day_booked', 'suffix': reservedDate[3]};
                                numStates++;
                            } else {
                                var defDayClass = bookingWidgetDefaultDateClass(date.getDateFormatted());
                                dateClasses[defDayClass] = {'reservation_state': defDayClass, 'suffix': null};
                                numStates++;
                            }
                        }
                        if (numRequested>0) numStates++;
                        var dateClass = bookingWidgetCombinedDateClasses(dateClasses, numStates);
                        if ( dateClass=='day_booked' 
                            || (dateClass=='day_available-day_booked' && id=='zizoo_boat_book_reservation_range_reservation_from') 
                            || (dateClass=='day_booked-day_available' && id=='zizoo_boat_book_reservation_range_reservation_to') )
                        {
                            selectable = false;
                        }
                        return {selectable: selectable, dateClass: dateClass, title: '', content: date.getDateFormatted()};
                    }
                    return bookingWidgetDefaultDate(date.getDateFormatted());    
                }
                
            }
        });
        
        $( "#zizoo_boat_book_reservation_range_reservation_from" ).datepick({
            rangeSelect: false,
            changeMonth: false,
            defaultDate: "+1d",
            numberOfMonths: 1,
            minDate: new Date(),
            showAnim: 'slideDown',
            dateFormat: 'dd/mm/yyyy',
            showButtonPanel: true,
            beforeShow: clearBtnFnc1,
            onChangeMonthYear: clearBtnFnc2,
            onSelect: function (dates){
                if (dates.length>0){
                    var d = dates[0];
                    if (this.id == 'zizoo_boat_book_reservation_range_reservation_from') {
                        d = $.datepick.add(d, 1, 'd');
                        $('#zizoo_boat_book_reservation_range_reservation_to').datepick('option', 'minDate', d || null); 
                    } 
                    else {
                        d = $.datepick.add(d, -1, 'd'); 
                        $('#zizoo_boat_book_reservation_range_reservation_from').datepick('option', 'maxDate', d || null); 
                    }
                }
                reloadWidget();
            },
            onDate: $.datepick.zizoo_widget,
            renderer: $.datepick.themeRollerRenderer
        });
        
        $( "#zizoo_boat_book_reservation_range_reservation_to" ).datepick({
            rangeSelect: false,
            changeMonth: false,
            defaultDate: "+1d",
            numberOfMonths: 1,
            minDate: new Date(),
            showAnim: 'slideDown',
            dateFormat: 'dd/mm/yyyy',
            showButtonPanel: true,
            beforeShow: clearBtnFnc1,
            onChangeMonthYear: clearBtnFnc2,
            onSelect: function (dates){
                if (dates.length>0){
                    var d = dates[0];
                    if (this.id == 'zizoo_boat_book_reservation_range_reservation_from') {
                        d = $.datepick.add(d, 1, 'd');
                        $('#zizoo_boat_book_reservation_range_reservation_to').datepick('option', 'minDate', d || null); 
                    } 
                    else {
                        d = $.datepick.add(d, -1, 'd'); 
                        $('#zizoo_boat_book_reservation_range_reservation_from').datepick('option', 'maxDate', d || null); 
                    }
                }
                reloadWidget();
            },
            onDate: $.datepick.zizoo_widget,
            renderer: $.datepick.themeRollerRenderer
        });
    }
    
    function reloadWidget(){
        var dateFrom    = $('#zizoo_boat_book_reservation_range_reservation_from').datepick('getDate');
        var dateUntil   = $('#zizoo_boat_book_reservation_range_reservation_to').datepick('getDate');
        
        if ($('#zizoo_boat_book_reservation_range_reservation_from').val()=='' || $('#zizoo_boat_book_reservation_range_reservation_to').val()=='') {
            $('#booking_price').html('');
            return;
        }
        $('#booking_widget').block({ message: null });
       
        $.ajax({
            type: "POST",
            url: '{{ ajax_url }}',
            data: $('#availability_form').serialize(),
            success: function (data, textStatus, jqXHR){
                $('#booking_widget').html($(data).find('#booking_widget_inner'));
                setup();
                $('#booking_widget').unblock();
            }
        });
    }
    
    function dateExists(dates, year, month, day){
        return (typeof dates[year]!='undefined' && typeof dates[year][month]!='undefined' && typeof dates[year][month][day]!='undefined');
    }

    
    $(document).ready(function(){
    
        setup();
    
    });
</script>