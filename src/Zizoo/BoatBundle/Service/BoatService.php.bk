<?php
namespace Zizoo\BoatBundle\Service;

use Zizoo\BoatBundle\Entity\Boat;
use Zizoo\BoatBundle\Entity\BoatType;
use Zizoo\BoatBundle\Entity\Price;
use Zizoo\BoatBundle\Entity\Image;
use Zizoo\BoatBundle\Entity\Equipment;

use Zizoo\AddressBundle\Entity\BoatAddress;

use Doctrine\Common\Collections\ArrayCollection;



class BoatService {
    
    private $em;
    private $messenger;
    private $container;
    
    public function __construct($em, $messenger, $container) {
        $this->em = $em;
        $this->messenger = $messenger;
        $this->container = $container;
    }
    
    public function addPrice(Boat $boat, Price $price, $default=false, $flush=true){
        //$existingPrice = $this->getPrices($boat, $price->getAvailableFrom(), $price->getAvailableUntil());
        $from   = $price->getAvailableFrom();
        $to     = $price->getAvailableUntil();
        $overlappingPrices = $this->em->getRepository('ZizooBoatBundle:Price')->getPrices($boat, $from, $to);
        $d = new \DateTime();
        
        if ($overlappingPrices && $overlappingPrices->count()>0){
            
            $firstPrice = $overlappingPrices->first();

            if ($from >= $firstPrice->getAvailableFrom() && $to <= $firstPrice->getAvailableUntil()){
                /** Search is entirely in first price range
                 * 
                 *              SEARCH              FROM---------------TO
                 *              PRICE       FROMxxxx---------------------xxxxTO
                 */                
                if ($price->getPrice()!=$firstPrice->getPrice() || $default){
                    $newPrice1 = null;
                    $newPrice2 = null;

                    $borderCase1 = $from > $firstPrice->getAvailableFrom();
                    $borderCase2 = $to < $firstPrice->getAvailableUntil();
                    
                    if ($borderCase1 && $borderCase2){
                        
                        $newPrice1From  = clone $firstPrice->getAvailableFrom();
                        $newPrice1To    = clone $from;
                        $newPrice1To    = $newPrice1To->modify('-1 second');
                        
                        $newPrice2From  = clone $to;
                        $newPrice2From  = $newPrice2From->modify('+1 second');
                        $newPrice2To    = clone $firstPrice->getAvailableUntil();
                        
                        $firstPriceFrom = clone $newPrice1To;
                        $firstPriceFrom = $firstPriceFrom->modify('+1 second');
                        $firstPrice->setAvailableFrom($firstPriceFrom);
                        
                        $firstPriceTo   = clone $newPrice2From;
                        $firstPriceTo   = $firstPriceTo->modify('-1 second');
                        $firstPrice->setAvailableUntil($firstPriceTo);
                        
                        $oldPrice = $firstPrice->getPrice();
                        
                        $firstPrice->setPrice($price->getPrice());
                        
                        if ($default){
                            $this->em->remove($firstPrice);
                        } else {
                            $this->em->persist($firstPrice);
                        }
                        
                        $newPrice1 = new Price();
                        $newPrice1->setAvailableFrom($newPrice1From);
                        $newPrice1->setAvailableUntil($newPrice1To);
                        $newPrice1->setCreated($d);
                        $newPrice1->setUpdated($d);
                        $newPrice1->setPrice($oldPrice);
                        
                        $newPrice1->setBoat($boat);
                        $boat->addPrice($newPrice1);
                        $this->em->persist($newPrice1);
                        
                        $newPrice2 = new Price();
                        $newPrice2->setAvailableFrom($newPrice2From);
                        $newPrice2->setAvailableUntil($newPrice2To);
                        $newPrice2->setCreated($d);
                        $newPrice2->setUpdated($d);
                        $newPrice2->setPrice($oldPrice);
                        
                        $newPrice2->setBoat($boat);
                        $boat->addPrice($newPrice2);
                        $this->em->persist($newPrice2);
                        
                        if ($flush) $this->em->flush();
                        
                    } else if ($borderCase1){
                        
                        $newPrice2From  = clone $from;
                        $newPrice2To    = clone $to;
                        $newPrice2 = new Price();
                        $newPrice2->setAvailableFrom($newPrice2From);
                        $newPrice2->setAvailableUntil($newPrice2To);
                        $newPrice2->setCreated($d);
                        $newPrice2->setUpdated($d);
                        $newPrice2->setPrice($price->getPrice());
                        
                        $firstPriceTo   = clone $newPrice2From;
                        $firstPriceTo   = $firstPriceTo->modify('-1 second');
                        $firstPrice->setAvailableUntil($firstPriceTo);
                        
                        if (!$default){
                            $newPrice2->setBoat($boat);
                            $boat->addPrice($newPrice2);
                            $this->em->persist($newPrice2);
                        } 
                        
                        $this->em->persist($firstPrice);
                        
                        if ($flush) $this->em->flush();
                        
                    } else if ($borderCase2){
                        
                        $newPrice1From  = clone $from;
                        $newPrice1To    = clone $to;
                        $newPrice1 = new Price();
                        $newPrice1->setAvailableFrom($newPrice1From);
                        $newPrice1->setAvailableUntil($newPrice1To);
                        $newPrice1->setCreated($d);
                        $newPrice1->setUpdated($d);
                        $newPrice1->setPrice($price->getPrice());
                        
                        $firstPriceFrom = clone $newPrice1To;
                        $firstPriceFrom = $firstPriceFrom->modify('+1 second');
                        $firstPrice->setAvailableFrom($firstPriceFrom);
                        
                        if (!$default){
                            $newPrice1->setBoat($boat);
                            $boat->addPrice($newPrice1);
                            $this->em->persist($newPrice1);
                        } 
                        
                        $this->em->persist($firstPrice);
                        
                        if ($flush) $this->em->flush();
                        
                    } else {
                        
                        if ($default){
                            $this->em->remove($firstPrice);
                        } else {
                            $firstPrice->setPrice($price->getPrice());
                            $firstPrice->setUpdated($d);
                            $this->em->persist($firstPrice);
                        }
                        
                        if ($flush) $this->em->flush();
                        
                    }

                    

                }
                
            } else {
                
                if ($borderCase1){
                    $tmpFrom = clone $to;
                    $firstPrice->setAvailableUntil($tmpFrom);
                    $firstPrice->setUpdated($d);
                    $this->em->persist($firstPrice);
                } else {
                    $tmpFrom = clone $from;
                    $tmpFrom = $tmpFrom->modify('+1 second');
                    $tmpFrom = $tmpFrom->modify('-1 day');
                    $firstPrice->setAvailableUntil($tmpFrom);
                    $firstPrice->setUpdated($d);
                    $this->em->persist($firstPrice);
                }             
                
                
                while ( ($nextPrice = $overlappingPrices->next()) ){
                    if ($to > $nextPrice->getAvailableUntil()){
                        $this->em->remove($nextPrice);
                    }
                }
                
                if ($nextPrice && $to > $nextPrice->getAvailableUntil()){
                    $tmpFrom = clone $to;
                    $tmpFrom = $tmpFrom->modify('+1 second');
                    $nextPrice->setAvailableFrom($tmpFrom);
                    $nextPrice->setUpdated($d);
                    $this->em->persist($nextPrice);
                }
                
                
                if (!$default){
                    $boat->addPrice($price);
                    $price->setBoat($boat);
                    $this->em->persist($price);
                }

                if ($flush) $this->em->flush();
                
            }
        } else if (!$default) {
            // Cases 1, 6 (no overlap)
            $boat->addPrice($price);
            $price->setBoat($boat);
            $this->em->persist($price);
            
            if ($flush) $this->em->flush();
        }
        
    }
    
    public function updatePrice(Boat $boat, Price $price, $flush=true){
        //$this->em->persist($boat);
        $this->em->persist($price);
        
        if ($flush){
            $this->em->flush();
        }
    }
    
    public function getPrice($boat, $from, $to)
    {
        if (!$from || !$to) return false;
        $from->setTime(0,0,0);
        $to->setTime(23,59,59);
        $prices = $boat->getPrice();
        foreach ($prices as $price){
            $availableFrom  = $price->getAvailableFrom();
            $availableUntil = $price->getAvailableUntil();
            //(StartA <= EndB) and (EndA >= StartB)
            $inRange = ($from < $availableUntil) && ($to > $availableFrom);
            if ($inRange) return $price;
        }
        return null;
    }
    
    public function addEquipment(Boat $boat, Equipment $equipment, $flush=true)
    {
        $boat->addEquipment($equipment);
        $equipment->addBoat($boat);
        $this->em->persist($equipment);
        if ($flush){
            $this->em->flush();
        }
    }
    
    public function addImages(Boat $boat, ArrayCollection $images){
        foreach ($images as $image){
            $this->addImage($boat, $image);
        }
    }
    
    public function addImage(Boat $boat, Image $image, $flush=true){
        
        //check if image already exists otherwise add it to boat
        if(!($boat->getImage()->contains($image))){
            $boat->addImage($image);
            $this->em->persist($image);
            if ($flush){
                $this->em->flush();
            }
        }
        
    }
    
    public function createBoat(Boat $boat, BoatAddress $address, BoatType $boatType, ArrayCollection $prices=null, ArrayCollection $equipment=null){

        $boat->setBoatType($boatType);
        
        $address->fetchGeo();
        $address->setBoat($boat);
        $boat->setAddress($address);
        
        if ($prices){
            foreach ($prices as $price){
                $this->addPrice($boat, $price, false);
            }
        }
        
        if ($equipment){
            foreach ($equipment as $e){
                $this->addEquipment($boat, $e, false);
            }
        }
        
        $this->em->persist($address);
        $this->em->persist($boat);
        $this->em->flush();
        return $boat;
    }
    
    public function createBoatType($id, $name, $order){
        $boatType = new BoatType($id, $name, $order);
        $this->em->persist($boatType);
        $this->em->flush($boatType);
        return $boatType;
    }
    
    public function createEquipment($id, $name, $order){
        $equipment = new Equipment($id, $name, $order);
        $this->em->persist($equipment);
        $this->em->flush($equipment);
        return $equipment;
    }
    
}
?>
