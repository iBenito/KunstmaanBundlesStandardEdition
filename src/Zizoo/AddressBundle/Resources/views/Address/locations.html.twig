{# src/Zizoo/AddressBundle/Resources/views/Address/locations_test.html.twig #}
{% trans_default_domain "labels" %}
{% extends 'ZizooAddressBundle::layout.html.twig' %}

{% block body %}
{% render "ZizooAddressBundle:Address:uniqueLocations" %}
<div id="map_div">
    <script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script>
    <script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/tags/markermanager/1.0/src/markermanager.js"></script>
    <script type="text/javascript" src="http://google-maps-utility-library-v3.googlecode.com/svn/trunk/markerclusterer/src/markerclusterer_compiled.js"></script>
    <script type="text/javascript" src="{{ asset('js/jquery.blockUI.js') }}"></script>
    <div id="map"></div>

    <style type="text/css">
    #map {
        width: 100%;
        height: 400px;
    }
    </style>
    
    
    <script type="text/javascript">
        var map;
        var markers = new Array();
        var mc;
        var geocoder;
        var center = new google.maps.LatLng(38, 15);
        var zoom = 2;
        
        function updateMarkers(){
            $('#map').block({ message: null }); 
            var index = $('#unique_locations :selected').index();

            var type;
            var val = null;
            var search = null;
            if (index>0){
                type = $('#unique_locations option:nth-of-type('+(index+1)+')').attr('class');
                search = $('#unique_locations option:nth-of-type('+(index+1)+')').attr('search');
                val  = $('#unique_locations').val();
            }

            $.ajax({
                url: (val==null?'location_markers':'location_markers/'+val),
                dataType: 'json',
                success: function(data) {
                    mc.clearMarkers();
                    markers = data;
                    placeMarkers();
                    if(val==null){
                        map.setCenter(center);
                        map.setZoom(zoom);
                    } else {
                        codeAddress(search);
                        map.setZoom(5);
                    }
                    $('#map').unblock();
                }
            });

        }

        function placeMarkers(){
            // Prepares the marker object, creating a google.maps.Marker object for each
            // location, place and country
            if (markers) {                
                $(markers).each(function(index, marker){
                    markers[index] = new google.maps.Marker({
                        title: marker.name,
                        position: new google.maps.LatLng(
                             marker.location.lat, marker.location.lng),
                             clickable: true,
                             draggable: false,
                             flat: true
                      });
                });
                mc = new MarkerClusterer(map, markers, {maxZoom: 19});
            }
            
        }
        
        function codeAddress(address) {
            geocoder.geocode( { 'address': address}, function(results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    map.setCenter(results[0].geometry.location);
                } else {
                    alert('Geocode was not successful for the following reason: ' + status);
                }
            });
        }
        
        /**
        * Initializes the map and listeners.
        */
        function initialize() {
            geocoder = new google.maps.Geocoder();
            map = new google.maps.Map(document.getElementById('map'), {
                center: center,
                zoom: zoom,
                mapTypeId: 'terrain'
            });
            //markers = {% render "ZizooAddressBundle:Address:locationMarkers" with {'search': '-1'} %};
            mc = new MarkerClusterer(map, markers, {maxZoom: 19});
            updateMarkers();
            //placeMarkers();
        }

        $(document).ready(function(){

            /**
            * The MarkerClusterer object.
            * @type {MarkerCluster}
            */
            mc = null;

            /**
            * The Map object.
            * @type {google.maps.Map}
            */
            map = null;

            if(typeof google === 'undefined' || google==null){
                $('#map').hide();
                return;
            }
            initialize();

            $('#unique_locations').chosen().change(updateMarkers);

        });

    </script>
    
    
</div>
{% endblock %}